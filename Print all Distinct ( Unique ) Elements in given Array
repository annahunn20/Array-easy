import java.io.*;
class GFG {
    static void printDistinct(int arr[], int n)
    {
        // Pick all elements one by one
        for (int i = 0; i < n; i++)
        {
            // Check if the picked element 
            // is already printed
            int j;
            for (j = 0; j < i; j++)
            if (arr[i] == arr[j])
                break;
     
            // If not printed earlier, 
            // then print it
            if (i == j)
            System.out.print( arr[i] + " ");
        }
    }
    public static void main (String[] args) 
    {
        int arr[] = {6, 10, 5, 4, 9, 120, 4, 6, 10};
        int n = arr.length;
        printDistinct(arr, n); 
    }
}
Time Complexity: O(n^2). 
Auxiliary Space: O(1), since no extra space has been taken.

using sorting
import java.io.*;
import java .util.*; 
class GFG 
{
    static void printDistinct(int arr[], int n)
    {
        // First sort the array so that 
        // all occurrences become consecutive
        Arrays.sort(arr);
     
        // Traverse the sorted array
        for (int i = 0; i < n; i++)
        {
            // Move the index ahead while 
            // there are duplicates
            while (i < n - 1 && arr[i] == arr[i + 1])
                i++;
     
            // print last occurrence of 
            // the current element
            System.out.print(arr[i] +" ");
        }
    }
    public static void main (String[] args) 
    {
        int arr[] = {6, 10, 5, 4, 9, 120, 4, 6, 10};
        int n = arr.length;
        printDistinct(arr, n);
 
    }
}
Time Complexity: O(n log n).
Auxiliary Space: O(1)
