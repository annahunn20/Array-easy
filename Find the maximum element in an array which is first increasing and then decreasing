Method 1 (Linear Search)
class Main
{
    static int findMaximum(int arr[], int low, int high)
    {
       int max = arr[low];
       int i;
       for (i = low; i <= high; i++)
       {
           if (arr[i] > max)
              max = arr[i];
       }
       return max;
    }
    public static void main (String[] args) 
    {
        int arr[] = {1, 30, 40, 50, 60, 70, 23, 20};
        int n = arr.length;
        System.out.println("The maximum element is "+ 
                            findMaximum(arr, 0, n-1));
    }
}
Time Complexity : O(n)
Auxiliary Space: O(1)

Method 2 (Binary Search – Recursive Solution) 
class Main
{ 
    static int findMaximum(int arr[], int low, int high)
    {      
       /* Base Case: Only one element is 
          present in arr[low..high]*/
       if (low == high)
         return arr[low];
      
       /* If there are two elements and 
          first is greater than the first 
          element is maximum */
       if ((high == low + 1) && arr[low] >= arr[high])
          return arr[low];
      
       /* If there are two elements and 
          second is greater than the second 
          element is maximum */
       if ((high == low + 1) && arr[low] < arr[high])
          return arr[high];
         
       /*low + (high - low)/2;*/
       int mid = (low + high)/2;   
      
       /* If we reach a point where arr[mid] 
          is greater than both of its adjacent 
          elements arr[mid-1] and arr[mid+1], 
          then arr[mid] is the maximum element*/
       if ( arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1])
          return arr[mid];
      
       /* If arr[mid] is greater than the next 
          element and smaller than the previous 
          element then maximum lies on left side 
          of mid */
       if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1])
         return findMaximum(arr, low, mid-1);
       else
         return findMaximum(arr, mid + 1, high);
    }
    public static void main (String[] args) 
    {
        int arr[] = {1, 3, 50, 10, 9, 7, 6};
        int n = arr.length;
        System.out.println("The maximum element is "+ findMaximum(arr, 0, n-1));
                            
    }
}
Time Complexity : O(logn)
Auxiliary Space : O(logn)

Method 3 (Binary Search – Iterative Solution) 
import java.util.*;
class GFG{
static int maxInBitonic(int arr[], int l, int r)
{
    while (l <= r) {
         int m = l + (r - l) / 2; // m = (l + r) / 2
        /****Base Cases Starts*****/     
         if(l==r)
        return arr[l];
       
        /* If there are two elements and first is greater
           then the first element is maximum */
        if ((r == l + 1) && arr[l] >= arr[r])
            return arr[l];
 
        /* If there are two elements and second is greater
           then the second element is maximum */
 
        if ((r == l + 1) && arr[l] < arr[r])
            return arr[r];
 
        /* If we reach a point where arr[mid] is greater
           than both of its adjacent elements arr[mid-1] and
           arr[mid+1], then arr[mid] is the maximum
           element*/
        if (arr[m] > arr[m + 1] && arr[m] > arr[m - 1])
            return arr[m];
 
        /****Base Case ends *****/
        // move to left with l and r=m-1
        if (arr[m] > arr[m + 1] && arr[m] < arr[m - 1])
            r = m - 1;
        else
            l = m + 1; // move to right with l=m+1 and r
    }
    // if we reach here, then element was
    // not present
    return -1;
}
public static void main(String[] args)
{
    int arr[] = { 1, 3, 50, 10, 9, 7, 6 };
    int n = arr.length;
    System.out.print("The maximum element is " + maxInBitonic(arr, 0, n - 1));        
}
}
Time Complexity: O(log n)
Auxiliary Space: O(1)
