import java.util.*;
import java.lang.*;
import java.io.*;
class arr_rot {
    // Function to leftRotate array multiple
    // times
    static void leftRotate(int arr[], int n, int k)
    {
        /* To get the starting point of
        rotated array */
        int mod = k % n;
        // Prints the rotated array from
        // start position
        for (int i = 0; i < n; ++i)
            System.out.print(arr[(i + mod) % n] + " ");
        System.out.println();
    }
    public static void main(String[] args)
    {
        int arr[] = { 1, 3, 5, 7, 9 };
        int n = arr.length;
        int k = 2;
        leftRotate(arr, n, k);
        k = 3;
        leftRotate(arr, n, k);
        k = 4;
        leftRotate(arr, n, k);
    }
}
Time Complexity: O(N), as we are using a loop to traverse N times.
Auxiliary Space: O(1), as we are not using any extra space.

Method II(Using Reversal):
import java.util.*;
public class Main {
    // Function for k times left rotation
    public static void leftRotate(int[] arr, int k) 
    {
      // if k>arr.length,k%arr.length will bring k back to range
       k%=arr.length;
        // Reverse the first k elements
        reverseArray(arr, 0, k - 1);
      
        // Reverse the remaining n-k elements
        reverseArray(arr, k, arr.length - 1);
      
        // Reverse the entire array
        reverseArray(arr, 0, arr.length - 1);

        // Print the rotated array from start position
        String result = Arrays.toString(arr).replaceAll("\\[|\\]|,|\\s", " ");
        System.out.println(result);
    }

    // Helper function to reverse a section of an array from start to end (inclusive)
    public static void reverseArray(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 7, 9};
        int k = 2;
        leftRotate(arr, k);
    }
}
Time Complexity: O(n)
Auxiliary Space: O(1), since no extra space has been taken.
