Find Second Largest element using Sorting:
import java.util.*;
class GFG {
    static void print2largest(Integer arr[], int arr_size)
    {
        // Sort the array in descending order
        Arrays.sort(arr, Collections.reverseOrder());
        // Start from second element as first element is the largest
        for (int i = 1; i < arr_size; i++) {
            // If the element is not equal to largest element
            if (arr[i] != arr[0]) {
                System.out.printf("The second largest "
                                      + "element is %d\n",
                                  arr[i]);
                return;
            }
        }
        System.out.printf("There is no second "
                          + "largest element\n");
    }

    public static void main(String[] args)
    {
        Integer arr[] = { 12, 35, 1, 10, 34, 1 };
        int n = arr.length;
        print2largest(arr, n);
    }
}
Time Complexity: O(nlogn), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.

Find Second Largest element by traversing the array twice (Two Pass)
import java.io.*;
class GFG {
    static void print2largest(int arr[], int arr_size)
    {
        int i, second;
        // There should be atleast two elements
        if (arr_size < 2) {
            System.out.printf(" Invalid Input ");
            return;
        }
        int largest = second = Integer.MIN_VALUE;
        // Find the largest element
        for (i = 0; i < arr_size; i++) {
            largest = Math.max(largest, arr[i]);
        }
        // Find the second largest element
        for (i = 0; i < arr_size; i++) {
            if (arr[i] != largest)
                second = Math.max(second, arr[i]);
        }
        if (second == Integer.MIN_VALUE)
            System.out.printf("There is no second "
                              + "largest element\n");
        else
            System.out.printf("The second largest "
                                  + "element is %d\n",
                              second);
    }
    public static void main(String[] args)
    {
        int arr[] = { 12, 35, 1, 10, 34, 1 };
        int n = arr.length;

        print2largest(arr, n);
    }
}
Time Complexity: O(n), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.

Find Second Largest element by traversing the array once (One Pass):
import java.io.*;
class GFG {
    public static void print2largest(int arr[],
                                     int arr_size)
    {
        int i, first, second;
        /* There should be atleast two elements */
        if (arr_size < 2) {
            System.out.print(" Invalid Input ");
            return;
        }
        first = second = Integer.MIN_VALUE;
        for (i = 0; i < arr_size; i++) {
            /* If current element is greater than 
            first then update both first and second */
            if (arr[i] > first) {
                second = first;
                first = arr[i];
            }
            /* If arr[i] is in between first and 
               second then update second  */
            else if (arr[i] > second && arr[i] != first)
                second = arr[i];
        }

        if (second == Integer.MIN_VALUE)
            System.out.print("There is no second largest"
                             + " element\n");
        else
            System.out.print("The second largest element"
                             + " is " + second);
    }
    public static void main(String[] args)
    {
        int arr[] = { 12, 35, 1, 10, 34, 1 };
        int n = arr.length;
        print2largest(arr, n);
    }
}
Time Complexity: O(n), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.
