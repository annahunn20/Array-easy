Using Hashing – O(n) time and O(n) auxiliary space
import java.util.Arrays;
public class Main {
    public static int missingNumber(int n, int[] arr)
    {
        // Create hash array of size n+1
        int[] hash = new int[n + 1];
        // Store frequencies of elements
        for (int i = 0; i < n - 1; i++) {
            hash[arr[i]]++;
        }

        // Find the missing number
        for (int i = 1; i <= n; i++) {
            if (hash[i] == 0) {
                return i;
            }
        }
        // Edge case handling (though problem guarantees a solution)
        return -1;
    }
    public static void main(String[] args)
    {
        int[] arr = { 1, 2, 3, 5 };
        int n = 5;
        System.out.println(missingNumber(n, arr));
    }
}

Using Sum of N terms Formula – O(n) time and O(1) auxiliary space
An efficient approach is to use summation formula. As we know that the sum of the first N natural numbers is given by the formula N * (N + 1) / 2. 
Compute this sum and subtract the sum of all elements in the array from it to get the missing number.

public class Main {
    public static int missingNumber(int n, int[] arr)
    {
        int sum = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += arr[i];
        }
        int expectedSum = (n * (n + 1)) / 2;

        // Return the missing number
        return expectedSum - sum;
    }
    public static void main(String[] args)
    {
        int[] arr = { 1, 2, 3, 5 };
        int n = 5;
        System.out.println(missingNumber(n, arr));
    }
}

Using XOR Operation – O(n) time and O(1) auxiliary space
The approach is based on the idea that XOR of a number with itself is 0, and XOR of a number with 0 is the number itself. 
This means that if we find XOR of first N natural numbers and then take XOR of each array elements with this, 
then the resultant will be the missing number.

public class Main {
    public static int missingNumber(int n, int[] arr)
    {
        int xor1 = 0, xor2 = 0;
        // XOR all array elements
        for (int i = 0; i < n - 1; i++) {
            xor2 ^= arr[i];
        }
        // XOR all numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            xor1 ^= i;
        }
        // Missing number is the XOR of xor1 and xor2
        return xor1 ^ xor2;
    }
    public static void main(String[] args)
    {
        int[] arr = { 1, 2, 3, 5 };
        int n = 5;
        System.out.println(missingNumber(n, arr));
    }
}
