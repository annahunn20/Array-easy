// Java program to count 1's in a sorted array
class CountOnes {
    /* Returns counts of 1's in arr[low..high].  Thearray is assumed to be sorted in non-increasingorder */
    int countOnes(int arr[], int low, int high)
    {
        if (high >= low) {
            // get the middle index
            int mid = low + (high - low) / 2;

            // check if the element at middle index is last
            // 1
            if ((mid == high || arr[mid + 1] == 0)
                && (arr[mid] == 1))
                return mid + 1;

            // If element is not last 1, recur for right
            // side
            if (arr[mid] == 1)
                return countOnes(arr, (mid + 1), high);

            // else recur for left side
            return countOnes(arr, low, (mid - 1));
        }
        return 0;
    }
    public static void main(String args[])
    {
        CountOnes ob = new CountOnes();
        int arr[] = { 1, 1, 1, 1, 0, 0, 0 };
        int n = arr.length;
        System.out.println("Count of 1's in given array is "+ ob.countOnes(arr, 0, n - 1));                      
    }
}
Time complexity: O(Log(N))
Auxiliary Space: O(log(N))

Count 1’s in a sorted binary array using binary search iteratively:

import java.io.*;
class GFG {
    static int countOnes(int arr[], int n)
    {
        int ans;
        int low = 0, high = n - 1;
        while (low <= high) { // get the middle index
            int mid = (low + high) / 2;

            // else recur for left side
            if (arr[mid] < 1)
                high = mid - 1;

            // If element is not last 1, recur for right
            // side
            else if (arr[mid] > 1)
                low = mid + 1;
            else

            // check if the element at middle index is last
            // 1
            {
                if (mid == n - 1 || arr[mid + 1] != 1)
                    return mid + 1;
                else
                    low = mid + 1;
            }
        }
        return 0;
}
    public static void main(String[] args)
    {

        int arr[] = { 1, 1, 1, 1, 0, 0, 0 };
        int n = arr.length;

        System.out.println("Count of 1's in given array is " + countOnes(arr, n));                          
    }
}
Time complexity: O(Log(N))
Auxiliary Space: O(1)

Count 1’s in a sorted binary array using inbuilt functions:
import java.util.Arrays;
public class Main {
    public static void main(String[] args)
    {
        int[] arr = { 1, 1, 1, 1, 0, 0, 0, 0, 0 };
        int size = arr.length;

        // Counting the number of 1's in the array
        long total = Arrays.stream(arr) .filter(i -> i == 1) .count();                      
        System.out.println("Count of 1's in given array is " + total);
                          
    }
}
Time Complexity: O(n)
Auxiliary Space: O(1)

