Observe that array consists of [n/2] even positioned elements. 
If we assign the largest [n/2] elements to the even positions and the rest of the elements to the odd positions,
our problem is solved. Because element at the odd position will always be less than the element at the even position as it is the maximum element and vice versa. 
Sort the array and assign the first [n/2] elements at even positions.

import java.io.*;
import java.util.*;

class GFG {
    static void assign(int arr[], int N)
    {
        // Sort the array
        Arrays.sort(arr);
        int ans[] = new int[N];
        int ptr1 = 0, ptr2 = N - 1;
        for (int i = 0; i < N; i++) {
            if (i % 2 == 0)
                ans[i] = arr[ptr2--];
            else
                ans[i] = arr[ptr1++];
        }
        for (int i = 0; i < N; i++)
            System.out.print(ans[i] + " ");
    }
    public static void main(String args[])
    {
        int arr[] = { 1, 2, 2, 1 };
        int N = arr.length;
        assign(arr, N);
    }
}
Time Complexity: O(N * log N), where N is the size of input array arr[].
Auxiliary Space: O(N)

Approach 2: Rearranging array by swapping elements

One other approach is to traverse the array from the first element till N â€“ 1 and 
swap the element with the next one if the condition is not satisfied. 

import java.io.*;

class GFG {
    static void rearrange(int[] arr, int N)
    {
        for (int i = 0; i < N; i += 2) {
            // Compare it with the previous element
            if (i > 0 && arr[i - 1] > arr[i]) {
                int temp = arr[i - 1];
                arr[i - 1] = arr[i];
                arr[i] = temp;
            }
            // Compare it with the next element
            if (i < N - 1 && arr[i + 1] > arr[i]) {
                int temp = arr[i + 1];
                arr[i + 1] = arr[i];
                arr[i] = temp;
            }
        }
    }
    public static void main(String[] args)
    {
        int N = 4;
        int[] arr = { 1, 2, 2, 1 };
        rearrange(arr, N);
        for (int i = 0; i < N; i++)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
} 
Time Complexity: O(N), where N is the size of input array arr[].
Auxiliary Space: O(1)
